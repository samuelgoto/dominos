{
  "name": "dominos",
  "payment=disallowed-name": "pizzapi",
  "version": "2.0.0",
  "description": "node js API for Domino's pizza",
  "main": "dominos-pizza-api.js",
  "scripts": {
    "test": "mocha",
    "start": "node example/commandline-pizza/dominos-commandline-pizza.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/RIAEvangelist/node-dominos-pizza-api.git"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "keywords": [
    "Dominos",
    "Domino's",
    "Pizza",
    "API",
    "Pie",
    "PizzaPI"
  ],
  "author": {
    "name": "Brandon Miller",
    "email": "brandon@diginow.it"
  },
  "contributors": [
    {
      "name": "Julian Hartline",
      "email": "julianh2o@gmail.com",
      "url": "http://www.julianhartline.com"
    },
    {
      "name": "Madeline Cameron",
      "email": "madeline@madelinecameron.net",
      "url": "http://madelinecameron.net"
    },
    {
      "name": "Adrian Sida"
    },
    {
      "name": "Victor Quinn"
    },
    {
      "name": "Matt Cotter"
    }
  ],
  "license": "DBAD",
  "bugs": {
    "url": "https://github.com/RIAEvangelist/node-dominos-pizza-api/issues"
  },
  "directories": {
    "example": "example"
  },
  "dependencies": {
    "request": "^2.50.0",
    "xml2json": "^0.9.0"
  },
  "devDependencies": {
    "chai": "^3.0.0",
    "colors": "^1.0.3",
    "mocha": "^2.2.5"
  },
  "homepage": "https://github.com/madelinecameron/PizzaPI",
  "readme": "Domino's PizzAPI\r\n====\r\nThis is a node.js wrapper for the Domino's pizza APIs.\r\nThe ` dominos ` module is the latest release and ` pizzapi ` should provide the dev release from our pizzapi development branch this branch is maintained by [madelinecameron](https://github.com/madelinecameron).\r\n[See the pretty PizzaPI documentation](http://riaevangelist.github.io/node-dominos-pizza-api/)\r\n\r\n[![Join the chat at https://gitter.im/RIAEvangelist/node-dominos-pizza-api](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/RIAEvangelist/node-dominos-pizza-api?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n\r\n__PAYMENT-SUPPORTED-MODULE__\r\nThis module will pass payment information directly from the customer to Domino's Pizza for Domino's Pizza to process.\r\n\r\nnpm dominos info :  [See npm trends and stats for dominos](http://npm-stat.com/charts.html?package=dominos&author=&from=&to=)\r\n![dominos npm version](https://img.shields.io/npm/v/dominos.svg) ![supported node version for pizzapi](https://img.shields.io/node/v/pizzapi.svg) ![total npm downloads for pizzapi](https://img.shields.io/npm/dt/dominos.svg) ![monthly npm downloads for pizzapi](https://img.shields.io/npm/dm/dominos.svg) ![npm licence for pizzapi](https://img.shields.io/npm/l/dominos.svg)\r\n\r\n[![RIAEvangelist](https://avatars3.githubusercontent.com/u/369041?v=3&s=100)](https://github.com/RIAEvangelist)\r\n\r\nGitHub info :\r\n[![node-dominos-pizza-api GitHub Release](https://img.shields.io/github/release/RIAEvangelist/node-dominos-pizza-api.svg) ![GitHub license node-dominos-pizza-api license](https://img.shields.io/github/license/RIAEvangelist/node-dominos-pizza-api.svg) ![open issues for node-dominos-pizza-api on GitHub](https://img.shields.io/github/issues/RIAEvangelist/node-dominos-pizza-api.svg)](http://riaevangelist.github.io/node-dominos-pizza-api/)\r\n\r\n---\r\n\r\n__PAYMENT-DISSALLOWED-MODULE__\r\n\r\nFor individuals who wish to test without the risk of actually purchasing [@madelinecameron](https://github.com/madelinecameron), a major contributor to this repo and module have created the npm pizzapi module it is the same as the ` dominos ` module but has no built in method to purchase, you would need to manually create the payment object to send to Domino's Pizza.\r\n\r\n[See npm trends and stats for pizzapi](http://npm-stat.com/charts.html?package=pizzapi&author=&from=&to=)\r\n![pizzapi npm version](https://img.shields.io/npm/v/pizzapi.svg) ![supported node version for pizzapi](https://img.shields.io/node/v/pizzapi.svg) ![total npm downloads for pizzapi](https://img.shields.io/npm/dt/pizzapi.svg) ![monthly npm downloads for pizzapi](https://img.shields.io/npm/dm/pizzapi.svg) ![npm licence for pizzapi](https://img.shields.io/npm/l/pizzapi.svg)\r\n\r\n[![madelinecameron](https://avatars3.githubusercontent.com/u/3712472?v=3&s=100)](https://github.com/madelinecameron)\r\n\r\n---\r\n\r\nThis work is licenced via the [DBAD Public Licence](http://www.dbad-license.org/). It is a derivative work from Dominos API.\r\n\r\nInstall either [Dominos](https://www.npmjs.com/package/dominos) or [PizzaPI](https://www.npmjs.com/package/pizzapi) depending on your needs for placing an order.\r\n====\r\n\r\n__payments are allowed and will purchase Pizza__ ` npm install dominos `\r\n\r\n__no payments allowed, no actual pizza purchases__ ` npm install pizzapi `\r\n\r\nContributing\r\n====\r\n\r\n1. Pull or Fork code.\r\n2. from the cloned directory run ` npm install ` (this will install required dependancies, depending on your system may require)\r\n3. be awesome!\r\n\r\n\r\nExamples\r\n====\r\n\r\nYou can run the domino's pizza command line interface from your terminal just by running ` npm start `! See the example in the examples directory.\r\n\r\nSee the examples directory for simple apps and demonstrations on using the basic functionality.\r\n\r\n\r\nTesting\r\n====\r\nSimply run ` npm test `\r\nif you have issues with this you may want to try installing mocha globally like this : ` npm install -g mocha `\r\n\r\n-OR for manual testing-\r\n\r\n1. Install mocha ` npm install -g mocha `\r\n1. Run the tests ` mocha `\r\n\r\n---\r\n\r\nFinding Stores\r\n====\r\n\r\n|argument|type|default|required|\r\n|--------|----|-------|--------|\r\n|address|full or partial address string|null|true|\r\n|type|Delivery, Carryout, all| all | true|\r\n|callback|function to pass the api result to|null|true|\r\n\r\nNote: the 'address' parameter is passed to the Address class. This means any formatting that works for Address will work being passed here. This means you can pass JSON, array or string.\r\n\r\n### By Postal Code\r\n***this yields the least accurate information***\r\n\r\n```javascript\r\n\r\nvar pizzapi = require('dominos'); // or without payment option use require('pizzapi');\r\n\r\npizzapi.Util.findNearbyStores(\r\n    '63102',))\r\n    'Delivery',\r\n    function(storeData){\r\n        console.log(storeData);\r\n    }\r\n);\r\n\r\n```\r\n\r\n### By City and Postal Code\r\n***this yields less accurate information but is better than just using the postal code***\r\n\r\n```javascript\r\n\r\n  var pizzapi = require('dominos'); // or without payment option use require('pizzapi');\r\n\r\n  pizzapi.Util.findNearbyStores(\r\n      'St. Louis, MO, 63102',\r\n      'Delivery',\r\n      function(storeData){\r\n          console.log(storeData);\r\n      }\r\n  );\r\n```\r\n\r\n### Using Full or Nearly Full Address\r\n***this yields the best information and sorts stores by actual distance***\r\n\r\n```javascript\r\n\r\n  var pizzapi = require('dominos'); // or without payment option use require('pizzapi');\r\n\r\n  pizzapi.Util.findNearbyStores(\r\n      '700 Clark Ave, St. Louis, MO, 63102',\r\n      'Delivery',\r\n      function(storeData){\r\n          console.log(storeData);\r\n      }\r\n  );\r\n\r\n```\r\n\r\n---\r\n\r\nStore\r\n====\r\n\r\n|argument|type|default|required|\r\n|--------|----|-------|--------|\r\n|ID      |Integer|null|true    |\r\n\r\n```javascript\r\n\r\n  //Get Store Info for Store #4336\r\n  var pizzapi = require('dominos'); // or without payment option use require('pizzapi');\r\n  var myStore = new pizzapi.Store();\r\n  myStore.ID=4336;\r\n\r\n  myStore.getInfo(\r\n      function(storeData){\r\n          console.log(storeData);\r\n      }\r\n  );\r\n\r\n```\r\n\r\n### Store menu\r\n\r\n|argument|type|default|required|\r\n|--------|----|-------|--------|\r\n|callback|function|null|true   |\r\n\r\n```javascript\r\n\r\n  //Get Menu for Store #4336\r\n  var pizzapi = require('dominos'); // or without payment option use require('pizzapi');\r\n  var myStore = new pizzapi.Store();\r\n  myStore.ID = 4336;\r\n\r\n  myStore.getMenu(\r\n      function(storeData){\r\n          console.log(storeData);\r\n      }\r\n  );\r\n\r\n```\r\n\r\n### Store info\r\n|argument|type|default|required|\r\n|--------|----|-------|--------|\r\n|callback|function|null|true   |\r\n\r\n```javascript\r\n\r\n  //Get Info for Store #4336\r\n  var pizzapi = require('dominos'); // or without payment option use require('pizzapi');\r\n  var myStore = new pizzapi.Store();\r\n  myStore.ID = 4336;\r\n\r\n  myStore.getInfo(\r\n      function(storeData){\r\n          console.log(storeData);\r\n      }\r\n  );\r\n\r\n```\r\n\r\n### Friendly menu list\r\n|argument|type|default|required|\r\n|--------|----|-------|--------|\r\n|callback|function|null|true   |\r\n\r\nReturns a list of all items the store offers in an JSON array, formatted {Code: Friendly Name}\r\n\r\n```javascript\r\n\r\n  //Get friendly name menu for Store #4336\r\n  var pizzapi = require('dominos'); // or without payment option use require('pizzapi');\r\n  var myStore = new pizzapi.Store();\r\n  myStore.ID = 4336;\r\n\r\n  myStore.getFriendlyNames(\r\n      function(storeData){\r\n          console.log(storeData);\r\n      }\r\n  );\r\n\r\n```\r\n\r\n---\r\n\r\nAddress\r\n====\r\nWhen creating a new Address object, there are many ways to instantiate the object!\r\n\r\nThe following are examples of the methods:\r\n\r\n#### From string *note the commas*\r\n\r\n```javascript\r\n\r\n  var fullAddress = new Address('900 Clark Ave, St. Louis, MO, 63102');\r\n\r\n  //or\r\n\r\n  var partAddress = new Address('St. Louis, MO, 63102');\r\n\r\n  //or\r\n\r\n  var stateAndZip = new Address('St. Louis, 63102');\r\n\r\n  //or\r\n\r\n  var cityAndZip = new Address('St. Louis, 63102');\r\n\r\n  //only zip\r\n\r\n  var onlyZip = new Address('63102');\r\n\r\n```\r\n\r\n#### From JSON\r\n\r\n```javascript\r\n\r\n  var jsonAddress = new Address(\r\n      {\r\n          Street: '900 Clark Ave',\r\n          City: 'St. Louis',\r\n          Region: 'MO',\r\n          PostalCode: 63102\r\n      }\r\n  );\r\n\r\n```\r\n\r\n#### From array\r\n\r\n```javascript\r\n\r\n  var arrayAddress = new Address(['900 Clark Ave', 'St. Louis', 'MO', '63102']);\r\n\r\n```\r\n\r\n---\r\n\r\nCustomer\r\n===\r\n\r\n|argument|type|default|\r\n|--------|----|-------|\r\n|address|Address|null|\r\n|firstName|String|''|\r\n|lastName|String|''|\r\n|email|String|''|\r\n|phone|String|''|\r\n\r\n---\r\n\r\n```javascript\r\n\r\n  var customer = new Customer(\r\n      {\r\n          address: someAddressObj,\r\n          firstName: 'Barack',\r\n          lastName: 'Obama',\r\n          phone: '1-800-The-White-House',\r\n          email: 'br'\r\n      }\r\n  )\r\n\r\n```\r\n---\r\n\r\nItem\r\n====\r\nYou can get the codes from one of the menu requests.\r\n\r\n|argument|type|default|\r\n|--------|----|-------|\r\n|code|String|null|\r\n|quantity|Integer|1|\r\n|options|Array|[]|\r\n\r\n```javascript\r\n\r\n  var newItem = new Item(\r\n    {\r\n        code: '14SCREEN'\r\n    }\r\n  );\r\n  //and so on...\r\n\r\n```\r\n---\r\n\r\nOrder\r\n====\r\n\r\nThis is the class that every other class feeds into.\r\n\r\n|argument|type|default|\r\n|--------|----|-------|\r\n|code|String|null|\r\n|quantity|Integer|1|\r\n|options|Array|[]|\r\n\r\n### creating an order\r\n\r\n```javascript\r\n\r\n  var pizzapi = require('dominos'); // or without payment option use require('pizzapi');\r\n\r\n  var thePresident = new pizzapi.Customer(\r\n      {\r\n          firstName: 'Barack',\r\n          lastName: 'Obama',\r\n          address: '700 Pennsylvania Avenue, Washington, DC',\r\n          email: 'barack@whitehouse.gov'\r\n      }\r\n  );\r\n\r\n  var order = new pizzapi.Order(\r\n      {\r\n          customer: thePresident,\r\n\r\n          //optional set the store ID right away\r\n          storeID: myStore.ID,\r\n\r\n          deliveryMethod: 'Delivery' //(or 'Carryout')\r\n      }\r\n  );\r\n\r\n  //or\r\n\r\n  var order = new pizzapi.Order();\r\n\r\n  order.FirstName = data;\r\n  order.LastName = data;\r\n  order.Email = data;\r\n  order.Phone = data;\r\n\r\n  //and if you want to update the store id just :\r\n\r\n  order.StoreID = myStore.ID;\r\n\r\n```\r\n\r\n### duplicating an order\r\n\r\n```javascript\r\n\r\n  var anotherIdenticalOrder = new pizzapi.Order(\r\n      {\r\n          order:order\r\n          //or\r\n          //Order:order\r\n          //because domino's pizza web API returns pascal case...\r\n      }\r\n  );\r\n\r\n  //or create a duplicate order WITH different customer params\r\n\r\n  var order = new pizzapi.Order(\r\n      {\r\n          customer: thePresident,\r\n          deliveryMethod: 'Delivery' //(or 'Carryout')\r\n      }\r\n  );\r\n\r\n```\r\n\r\n### Adding a product to the order :\r\n\r\n```javascript\r\n\r\n  order.addItem(\r\n      new pizzapi.Item(\r\n          {\r\n              code: '14SCREEN',\r\n              options: [],\r\n              quantity: 1\r\n          }\r\n      )\r\n  );\r\n\r\n```\r\n\r\n### Validating an Order\r\nThis step is **Strongly** recommended\r\n\r\n```javascript\r\n\r\n  order.validate(\r\n      function(result) {\r\n          console.log(\"We did it!\");\r\n      }\r\n  );\r\n\r\n```\r\n\r\n### Price an Order\r\n\r\n```javascript\r\n\r\n  order.price(\r\n      function(result) {\r\n          console.log(\"Price!\")\r\n      }\r\n  );\r\n\r\n```\r\n\r\n### Place an Order\r\nAt least one item must've been added to place an order.\r\n\r\n#### with payment allowed\r\nYou don't have to do anything for the payment, Domino's Pizza will handle all transactions.\r\n\r\n```javascript\r\n\r\n  var pizzapi = require('dominos');\r\n\r\n  var cardNumber = '4100123422343234';\r\n\r\n  var cardInfo = new order.PaymentObject();\r\n  cardInfo.Amount = order.Amounts.Customer;\r\n  cardInfo.Number = cardNumber;\r\n  cardInfo.CardType = order.validateCC(cardNumber);\r\n  cardInfo.Expiration = '0115';//  01/15 just the numbers \"01/15\".replace(/\\D/g,'');\r\n  cardInfo.SecurityCode = '777';\r\n  cardInfo.PostalCode = '90210'; // Billing Zipcode\r\n\r\n  order.Payments.push(cardInfo);\r\n\r\n  order.place(\r\n      function(result) {\r\n          console.log(\"Order placed!\");\r\n      }\r\n  );\r\n\r\n```\r\n\r\n#### no actual purchase allowed\r\n\r\n```javascript\r\n\r\n  // if you want no accidental purchase or liability use the pizzapi module!\r\n  var pizzapi = require('pizzapi');\r\n\r\n  order.place(\r\n      function(result) {\r\n          console.log(\"Order placed!\");\r\n      }\r\n  );\r\n\r\n```\r\n\r\n---\r\n\r\nTracking\r\n====\r\n\r\n### By Phone\r\n\r\n|argument|type|default|required|\r\n|--------|----|-------|--------|\r\n|phone|Phone number string or int|null|true|\r\n|callback|function to pass the api result to|null|true|\r\n\r\n```javascript\r\n\r\n  var pizzapi = require('dominos'); // or without payment option use require('pizzapi');\r\n\r\n  pizzapi.Track.byPhone(\r\n      2024561111,\r\n      function(pizzaData){\r\n          console.log(pizzaData);\r\n      }\r\n  );\r\n\r\n```\r\n\r\n### By orderKey\r\n\r\n|argument|type|default|required|\r\n|--------|----|-------|--------|\r\n|orderKey|string or int|null|true|\r\n|storeID|sting or int|null|true|\r\n|callback|function to pass the api result to|null|true|\r\n\r\n```javascript\r\n\r\n  var pizzapi = require('dominos'); // or without payment option use require('pizzapi');\r\n\r\n  pizzapi.Track.byId(\r\n      123456,\r\n      12345,\r\n      function(pizzaData){\r\n          console.log(pizzaData)\r\n      }\r\n  );\r\n\r\n```\r\n\r\nCode, Order, Eat, Be Happy!\r\n",
  "readmeFilename": "README.md",
  "_id": "dominos@2.0.0",
  "_from": "dominos@~2.0.0"
}
